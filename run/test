#!/usr/bin/env bash

# Print help

printUsage()
{
	echo "${0} [options]"
	echo
	echo "  --app          Only test the backend app"
	echo "  --db           Only test database code (requires MongoDB)"
	echo "  --libs         Only execute Javascript library tests"
	echo "  --base         Only test base modules"
	echo "  --frontend     Only execute frontend E2E tests"
	echo
	echo "  --kill-all     Clean up leftover processes after E2E tests (like Chromedriver, Chrome, etc.)"
	echo "                 Terminates whole process group but does not touch (for example) user browsers"
	echo "  -h|--help      Print this sermon"
	echo
	exit
}

### Process command line parameters and configure test suite

KILL_E2E_PROC=false

while [ $# -gt 0 ]; do	# Until you run out of parameters
	case "$1" in
		-h)
			printUsage
			;;
		--help)
			printUsage
			;;
		--app)
			DONT_TEST_ALL=true
			TEST_APP=true
			;;
		--libs)
			DONT_TEST_ALL=true
			TEST_LIBS=true
			;;
		--base)
			DONT_TEST_ALL=true
			TEST_BASE=true
			;;
		--db)
			DONT_TEST_ALL=true
			TEST_DATABASE=true
			;;
		--frontend)
			DONT_TEST_ALL=true
			TEST_FRONTEND=true
			;;
		--kill-all)
			KILL_E2E_PROC=true
			;;
	#	--tags)
	#		shift
	#		if [ $# -lt 1 ]; then
	#			echo "The --tags parameter expects a following string declaring the test tags"
	#			exit 3
	#		fi
	#		IFS=',' read -r -a TAGS <<< "$1"
	#		;;
	esac
	shift
done

# Clear screen and print intro

clear
echo -e "\033[38;1m#### Reader Critics Test Suite ####\033[0m"
echo

# App Configuration

export NODE_ENV="test"
export DEBUG=${DEBUG:-"*,-express:*,-finalhandler,-follow-redirects,-mocha:*,-retry-as-promised,-send"}
export WEB_CONCURRENCY=${WEB_CONCURRENCY:-3}

### Global test runners, save return code

EXITCODE=0

##### MOCHA

runMocha()
{
	echo -e "\033[1;38;5;214mTesting ${2} ...\033[0m"

	# Run Mocha
	CWD=$(pwd)
	export CWD

	node_modules/.bin/mocha --opts "conf/${1}"
	RETURN_VALUE=$?

	# Catch exit code
	if [ ${RETURN_VALUE} -ne 0 ] ; then
		EXITCODE=${RETURN_VALUE}
	fi
}

##### NIGHTWATCH

runNightwatch()
{
	echo -e "\033[1;38;5;214mTesting ${2} ...\033[0m"

	# Test tags - commented out as long as the Mocha runner crashes with tags defined
	#TAGS_CMDL=""
	#
	#if [ ! -z ${TAGS} ]; then
	#	for THIS_TAG in "${TAGS[@]}"
	#	do
	#		TAGS_CMDL="${TAGS_CMDL} --tag ${THIS_TAG}"
	#	done
	#fi

	# Run Nightwatch
	node_modules/.bin/nightwatch --config "conf/${1}" # ${TAGS_CMDL}
	RETURN_VALUE=$?

	# Clean up in case stuff breaks (which it does quite often when writing tests)
	if [ $KILL_E2E_PROC ]; then
		killall --quiet --process-group node_modules/chromedriver/lib/chromedriver/chromedriver
		killall --quiet --process-group node_modules/geckodriver/geckodriver
	fi

	# Catch exit code
	if [ ${RETURN_VALUE} -ne 0 ] ; then
		EXITCODE=${RETURN_VALUE}
	fi
}

### Test parts

testBackendApp()
{
	if [ $EXITCODE -ne 0 ] || ([ $DONT_TEST_ALL ] && [ ! $TEST_APP ]) ; then return ; fi
	runMocha "mocha-app.opts" "Backend Application"
}

testLibraries()
{
	if [ $EXITCODE -ne 0 ] || ([ $DONT_TEST_ALL ] && [ ! $TEST_LIBS ]) ; then return ; fi
	runMocha "mocha-libs.opts" "Libraries"
}

testBaseSource()
{
	if [ $EXITCODE -ne 0 ] || ([ $DONT_TEST_ALL ] && [ ! $TEST_BASE ]) ; then return ; fi
	runMocha "mocha-base.opts" "Base Sources"
}

testDatabase()
{
	if [ $EXITCODE -ne 0 ] || ([ $DONT_TEST_ALL ] && [ ! $TEST_DATABASE ]) ; then return ; fi
	runMocha "mocha-database.opts" "Database"
}

testFrontend()
{
	if [ $EXITCODE -ne 0 ] || ([ $DONT_TEST_ALL ] && [ ! $TEST_FRONTEND ]) ; then return ; fi

	export MASTER_PID=$$
	export PORT=${PORT:-"4000"}

	APPLOG="app.log"

	# Launch API service in the background
	echo "Starting app in the background"
	script /dev/null \
		--quiet --command "node out/start.js" \
		< /dev/null > ${APPLOG} 2>&1 &

	# Grab PID of background process
	NODE_PID=$!
	echo "App launching on PID ${NODE_PID}. Waiting for startup ..."

	# Install trap that catches the "ready" signal when the API has finished its initialization
	NODE_READY=false
	trap "NODE_READY=true" SIGUSR2

	# Wait for the APU process to become ready
	count=0
	until ( ${NODE_READY} )
	do
		((count++))
		if [ ${count} -gt 50 ]  # waits for a maximum of 10 seconds
		then
			echo "App didn't become ready in time. Check test output!"
			exit 69  # BSD value for "service unavailable"
		fi
		sleep 0.2
	done

	runNightwatch "nightwatch-frontend.js" "Frontend"

	echo "Terminating background process ${NODE_PID}"
	kill ${NODE_PID}

	echo -e "Check \033[38;1m${APPLOG}\033[0m for app output"
}

### Execute all test suites

runAllTests()
{
	testLibraries
	testBaseSource
	testBackendApp
	testDatabase
	testFrontend
}

### Return global exit code for CI service

runAllTests

echo
exit ${EXITCODE}

### NOTICE: ALL CHANGES TO THIS FILE WILL BE OVERWRITTEN ###
#
# This file is generated by running ./generate-circleci-config inside your
# .circleci config folder, alongside your local_config.yml
#
# Customizations in local_config.yml will end up here on regeneration
#
# All anchor definitions live in
# https://github.com/dbmedialab/ci/blob/master/common_aliases.yml
#

version: 2

common_aliases:
  # default workflow is deploy master to production, develop to stage, anything else to test
  # test will disappear, and PR will be deployed to stage in a pr-$app namespace
  - &default_workflows
      version: 2
      build-stage:
        jobs:
          - build:
              context: "org-global"
          - deploy_prod:
              context: "org-global"
              requires:
                - build
              filters:
                branches:
                  only: master
          - deploy_stage:
              context: "org-global"
              requires:
                - build
              filters:
                branches:
                  only: develop
          - deploy_test:
              context: "org-global"
              requires:
                - build
              filters:
                branches:
                  ignore:
                    - master
                    - develop

  - &privileged_workflows
      version: 2
      build-stage:
        jobs:
          - build:
              context: "org-global"
          - deploy_privileged:
              context: "org-global"
              requires:
                - build

  # --- utility functions --- #
  - &docker_login
    run:
      name: Authenticate with GCR
      command: echo $GCR_CREDENTIALS | docker login -u _json_key --password-stdin https://eu.gcr.io

  # --- deploy steps --- #
  # All of these refer to the "production" version of the deployer/kubectl container.
  # If iterating on deployer/kubectl itself, 1) make a custom tag on the image,
  # then 2) mutate your project local config, and 3) get back to 'production' ASAP
  # and delete your custom image tag from GCR -- do all of this and finish quickly,
  # because branches in the deployer/kubectl container touch a *lot of projects*;
  # more than one branch at a time in deployer will cause work-factories.

  - &deploy_prod
    machine: true
    steps:
      - checkout
      - <<: *docker_login
      - run:
          name: Deploy app to production
          command: |
            export ENV=prod
            export IMAGE=$GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            env | egrep -e '^(BUILD|CI_|CIRCLE|ENV=|GCR=|GH_|IMAGE=)' > /tmp/env-file
            docker run -t --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production kubeval_validate
            docker run --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production

  - &deploy_stage
    machine: true
    steps:
      - checkout
      - <<: *docker_login
      - run:
          name: Deploy app to stage
          command: |
            export ENV=stage
            export IMAGE=$GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            env | egrep -e '^(BUILD|CI_|CIRCLE|ENV=|GCR=|GH_|IMAGE=)' > /tmp/env-file
            docker run -t --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production kubeval_validate
            docker run --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production

  - &deploy_test
    machine: true
    steps:
      - checkout
      - <<: *docker_login
      - run:
          name: Deploy app to test
          command: |
            export ENV=test
            export IMAGE=$GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            env | egrep -e '^(BUILD|CI_|CIRCLE|ENV=|GCR=|GH_|IMAGE=)' > /tmp/env-file
            docker run -t --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production kubeval_validate
            docker run --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production

  - &deploy_privileged
    machine: true
    steps:
      - checkout
      - <<: *docker_login
      - run:
          name: Deploy app to privileged cluster
          command: |
            export ENV=privileged
            export IMAGE=$GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            env | egrep -e '^(BUILD|CI_|CIRCLE|ENV=|GCR=|GH_|IMAGE=)' > /tmp/env-file
            docker run -t --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production kubeval_validate
            docker run --env-file /tmp/env-file -v /home/circleci/project/kubefiles:/kubefiles $GCR/kubectl:production

  # --- steps to plug in your build --- #
  #
  - &container_defaults
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git

  - &setup_remote_docker
      setup_remote_docker:
        version: 17.10.0-ce
        docker_layer_caching: true

  - &docker_build
    run:
      name: Build and tag docker image
      command: |
        # --cache-from is used here as a best-effort layer cache, will work most of the time
        docker login -u _json_key -p "$GCR_CREDENTIALS" https://eu.gcr.io
        MUNGED_BRANCH=$(echo $CIRCLE_BRANCH | tr '/@#' '_')
        #docker pull $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$MUNGED_BRANCH || true
        #docker build --cache-from $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$MUNGED_BRANCH -t app .
        docker build -t app .
        docker tag app $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
        docker tag app $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$MUNGED_BRANCH

  - &docker_push_gcr
    run:
      name: Push docker image
      command: |
        docker login -u _json_key -p "$GCR_CREDENTIALS" https://eu.gcr.io
        docker push $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME

  - &setup_tests
      run:
        name: Create folder for tests output
        command: |
          mkdir -p $CIRCLE_WORKING_DIRECTORY/reports/junit

  - &store_test_results
    store_test_results:
      path: reports/junit/

  - &store_test_artifacts
    store_artifacts:
      path: reports/junit/



#########################################################################
#
# Anything below this line comes from local_config.yml inside the project
#
#########################################################################

version: 2

jobs:
  build:
    <<: *container_defaults
    steps:
      - checkout
      - <<: *setup_remote_docker
      - <<: *docker_build
      - <<: *setup_tests
      - run:
          name: Setup docker-compose and credentials
          command: |
            apk --no-cache add py-pip
            pip -q install docker-compose
      - run:
          name: Fire up compose context for later tests
          command: docker-compose -f docker-compose.ci.yml up -d
      - run:
          name: Test libs
          command: docker run $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 run/test --libs
      - run:
          name: Test base
          command: docker run $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 run/test --base
      - run:
          name: Test app
          command: docker run --network=container:test -e MONGODB_URL=mongodb://mongo/readercritics -e REDIS_URL_MESSAGE_QUEUE=redis://redis/1 -e REDIS_URL_SESSION_CACHE=redis://redis/2 -e AUTH_JWT_SECRET="abcd1234cdef5678abcd1234cdef5678abcd1234cdef5678abcd1234cdef5678" -e AUTH_SESSION_SECRET="0000cafe1111abcd0000cafe1111abcd0000cafe1111abcd0000cafe1111abcd" $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 run/test --app
      - run:
          name: Test db
          command: docker run --network=container:test -e MONGODB_URL=mongodb://mongo/readercritics -e REDIS_URL_MESSAGE_QUEUE=redis://redis/1 -e REDIS_URL_SESSION_CACHE=redis://redis/2 -e AUTH_JWT_SECRET="abcd1234cdef5678abcd1234cdef5678abcd1234cdef5678abcd1234cdef5678" -e AUTH_SESSION_SECRET="0000cafe1111abcd0000cafe1111abcd0000cafe1111abcd0000cafe1111abcd" $GCR/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 run/test --db
      - <<: *docker_push_gcr

  trigger_deploy_rc_customer1:
    <<: *container_defaults
    steps:
      - run:
          name: Triggering deploy of remote repo rc-customer1
          command: |
            apk add --no-cache curl curl-dev
            curl --user ${DEPLOY_KEY_RC_CUSTOMER1}: \
              --data build_parameters[CIRCLE_JOB]=deploy_reader_critics \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/rc-customer1/tree/$CIRCLE_BRANCH

  deploy_prod:  *deploy_prod
  deploy_stage: *deploy_stage
  deploy_test:  *deploy_test

workflows:
  version: 2
  build-stage:
    jobs:
      - build:
          context: "org-global"
      - deploy_prod:
          context: "org-global"
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_stage:
          context: "org-global"
          requires:
            - build
          filters:
            branches:
              only: develop
      - deploy_test:
          context: "org-global"
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
                - develop
      - trigger_deploy_rc_customer1:
          context: "org-global"
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop


import { DataTypes } from 'sequelize';

import sequelize from '../initSequelize';
import withDefaults from '../modelDefaults';

import Article from './Article';

/*
 Do not create a primary index in "options", the third parameter of define().
 Omitting the "primaryKey: true" on the fields and then defining the index will
 end you up with a unique index, even though you forced it with primaryKey=true.
 Omitting the "primaryKey: true" completely will create an "id" field with
 autoincrement as the primary key. Well thanks, but that is NOT what I want!

 In the end this model/table gets an autogenerated index name because we have no
 way of controlling its name in this case.
*/

const ArticleTag = sequelize.define('article_tag', {
	article_id: {
		type: DataTypes.INTEGER.UNSIGNED,
		allowNull: false,
		primaryKey: true,
	},
	tag_txt: {
		type: DataTypes.STRING,
		allowNull: false,
		primaryKey: true,
	},
}, withDefaults({
	timestamps: false,
}));

ArticleTag.belongsTo(Article, {
	foreignKey: 'article_id',
});

export default ArticleTag;
